import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from MySQL_settings import get_db_connection

TOKEN = '7777122360:AAFqDFBpG66zvf95v5T8u5TRqZT386D_8r4'
ADMIN_ID = 5257065430

bot = telebot.TeleBot(TOKEN)

user_paths = {} 

# /start
@bot.message_handler(commands=['start'])
def start_handler(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="create_cat"),
        InlineKeyboardButton("üóÇ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="create_subcat"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item"),
        InlineKeyboardButton("üí∞ –í—ã–≤–µ—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    )

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    bot.answer_callback_query(call.id)

    if call.data == "create_cat":
        create_category(call.message.chat.id)
    
    elif call.data == "create_subcat":
        create_subcategory(call.message.chat.id)
    
    elif call.data == "add_item":
        add_item(call.message.chat.id)
    
    elif call.data == "catalog":
        show_categories(call.message.chat.id, parent_id=None)

    elif call.data == "back":
        navigate_back(call)
    elif call.data.startswith("cat_"):
        navigate_to_category(call)
    elif call.data == "back_main_page":
        show_categories(call.message.chat.id, parent_id=None)

        



# –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def show_categories(chat_id, parent_id):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    if parent_id is None:
        cursor.execute("SELECT id, name FROM categories WHERE parent_id IS NULL")
    else:
        cursor.execute("SELECT id, name FROM categories WHERE parent_id = %s", (parent_id,))

    categories = cursor.fetchall()
    markup = InlineKeyboardMarkup()

    for category in categories:
        markup.add(InlineKeyboardButton(text=category["name"], callback_data=f"cat_{category['id']}"))

    if parent_id is not None:
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_main_page"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    cursor.close()
    conn.close()




def show_items(chat_id, category_id):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM items WHERE category_id = %s", (category_id,))
    items = cursor.fetchall()
    if items:
        for item in items:
            text = f"<b>{item['title']}</b>\n{item['description']}"
            bot.send_message(chat_id, text, parse_mode='HTML')
    else:
        bot.send_message(chat_id, "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    cursor.close()
    conn.close()



#–ù–∞–∑–∞–¥
def navigate_to_category(call):
    print('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    cat_id = int(call.data.split("_")[1])
    path = user_paths.get(call.message.chat.id, [])
    path.append(cat_id)
    user_paths[call.message.chat.id] = path

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM categories WHERE parent_id = %s", (cat_id,))
    subcategory_count = cursor.fetchone()[0]
    cursor.close()
    conn.close()

    bot.delete_message(call.message.chat.id, call.message.message_id)
    if subcategory_count > 0:
        show_categories(call.message.chat.id, cat_id)
    else:
        show_items(call.message.chat.id, cat_id)


def navigate_back(call):
    print('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –Ω–∞–∂–∞—Ç–∞')
    user_id = call.message.chat.id
    if user_id not in user_paths or not user_paths[user_id]:
        return show_categories(user_id, parent_id=None)

    user_paths[user_id].pop()  # —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
    if user_paths[user_id]:
        parent_id = user_paths[user_id][-1]
        show_categories(user_id, parent_id=parent_id)
    else:
        show_categories(user_id, parent_id=None)





# –°–æ–∑–¥–∞—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
def create_category(chat_id):
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    bot.register_next_step_handler(msg, process_category_name)


def process_category_name(message):
    name = message.text.strip()
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM categories WHERE name = %s AND parent_id IS NULL", (name,))
    if cursor.fetchone():
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        cursor.execute("INSERT INTO categories (name) VALUES (%s)", (name,))
        conn.commit()
        bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —Å–æ–∑–¥–∞–Ω–∞.")
    cursor.close()
    conn.close()



#–°–æ–∑–¥–∞—Ç—å –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def create_subcategory(chat_id):
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–¥–µ–∂–¥–∞ > –ú—É–∂—Å–∫–∞—è):")
    bot.register_next_step_handler(msg, ask_for_subcat_name)


def ask_for_subcat_name(message):
    path = message.text.strip()
    parent_id = get_category_id_by_path(path)
    if parent_id is None:
        bot.send_message(message.chat.id, "–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {path}:")
    bot.register_next_step_handler(msg, lambda m: save_subcategory(m, parent_id, path))


def save_subcategory(message, parent_id, path):
    name = message.text.strip()
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM categories WHERE name = %s AND parent_id = %s", (name, parent_id))
    if cursor.fetchone():
        bot.send_message(message.chat.id, "–¢–∞–∫–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        cursor.execute("INSERT INTO categories (name, parent_id) VALUES (%s, %s)", (name, parent_id))
        conn.commit()
        bot.send_message(message.chat.id, f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ '{path}'.")
    cursor.close()
    conn.close()


def get_category_id_by_path(path):
    parts = [p.strip() for p in path.split(">")]
    conn = get_db_connection()
    cursor = conn.cursor()
    parent_id = None
    for part in parts:
        if parent_id is None:
            cursor.execute("SELECT id FROM categories WHERE name = %s AND parent_id IS NULL", (part,))
        else:
            cursor.execute("SELECT id FROM categories WHERE name = %s AND parent_id = %s", (part, parent_id))
        row = cursor.fetchone()
        if row is None:
            cursor.close()
            conn.close()
            return None
        parent_id = row[0]
    cursor.close()
    conn.close()
    return parent_id


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
def add_item(chat_id):
    msg = bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–¥–µ–∂–¥–∞ > –ú—É–∂—Å–∫–∞—è > –ü—É—Ö–æ–≤–∏–∫–∏):")
    bot.register_next_step_handler(msg, ask_for_item_title)


def ask_for_item_title(message):
    path = message.text.strip()
    category_id = get_category_id_by_path(path)
    if category_id is None:
        bot.send_message(message.chat.id, "–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(msg, lambda m: ask_for_item_description(m, path, category_id))


def ask_for_item_description(message, path, category_id):
    title = message.text.strip()
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(msg, lambda m: ask_for_item_photo(m, path, category_id, title))


def ask_for_item_photo(message, path, category_id, title):
    description = message.text.strip()
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
    bot.register_next_step_handler(msg, lambda m: ask_for_item_video(m, path, category_id, title, description))


def ask_for_item_video(message, path, category_id, title, description):
    photo_id = None
    if message.content_type == 'photo':
        photo_id = message.photo[-1].file_id
    elif message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
    bot.register_next_step_handler(msg, lambda m: save_item(m, path, category_id, title, description, photo_id))


def save_item(message, path, category_id, title, description, photo_id):
    video_id = None
    if message.content_type == 'video':
        video_id = message.video.file_id
    elif message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO items (title, description, photo_id, video_id, category_id) VALUES (%s, %s, %s, %s, %s)",
        (title, description, photo_id, video_id, category_id)
    )
    conn.commit()
    cursor.close()
    conn.close()

    bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ {path}.")


bot.polling()
